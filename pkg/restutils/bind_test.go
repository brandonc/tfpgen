package restutils

import (
	"testing"

	"github.com/getkin/kin-openapi/openapi3"
)

func Test_BindResources(t *testing.T) {
	doc, err := openapi3.NewLoader().LoadFromFile("../../test-fixtures/restlike.yaml")

	if err != nil {
		t.Fatalf("invalid openapi fixture: %s", err)
	}

	probe := NewProbe(doc)

	t.Run("Can bind valid CRUD resources", func(t *testing.T) {
		// Usually generated by config.AsBindings
		bindings := []RESTBinding{
			{
				Name: "Boards",
				CreateAction: &ActionBinding{
					Path:   "/v3/boards",
					Method: "POST",
				},
				ReadAction: &ActionBinding{
					Path:   "/v3/boards/{board_id}",
					Method: "GET",
				},
				UpdateAction: &ActionBinding{
					Path:   "/v3/boards/{board_id}",
					Method: "PUT",
				},
				DeleteAction: &ActionBinding{
					Path:   "/v3/boards/{board_id}",
					Method: "DELETE",
				},
			},
		}

		resources, err := probe.BindResources(doc, bindings)

		if err != nil {
			t.Errorf("invalid binding: %s", err)
		}

		board, ok := resources["Boards"]
		if !ok {
			t.Errorf("expected resource \"Boards\" to be bound")
		}

		if board != nil && !board.IsCRUD() {
			t.Errorf("expected resource \"Boards\" to be a CRUD resource")
		}
	})
}
