package generator

import (
	"fmt"

	"github.com/brandonc/tfpgen/internal/config"
	"github.com/getkin/kin-openapi/openapi3"
)

type MainGenerator struct {
	Config *config.Config
	Doc    *openapi3.T
}

type MainGeneratorTemplateData struct {
	Registry          string
	ProviderNamespace string
	ProviderName      string
	ModuleRepository  string
}

// Compile time proof that MainGenerator is a Generator
var _ Generator = (*MainGenerator)(nil)

func (g *MainGenerator) Template() string {
	return `// Code generated by tfpgen; DO NOT EDIT.
package main

import (
	"context"
	"log"

	"{{ .ModuleRepository }}/provider"
	"github.com/hashicorp/terraform-plugin-framework/providerserver"
)

var (
	version string = "dev"
)

func main() {
	opts := providerserver.ServeOpts{
		Address: "{{ .Registry }}/{{ .ProviderNamespace }}/{{ .ProviderName }}",
	}

	err := providerserver.Serve(context.Background(), provider.New(version), opts)

	if err != nil {
		log.Fatal(err.Error())
	}
}
`
}

func (g *MainGenerator) Generate(destinationDirectory string) error {
	return execute(g, fmt.Sprintf("%s/main.go", destinationDirectory))
}

func (g *MainGenerator) PackageName() string {
	return "main"
}

func (g *MainGenerator) CreateTemplateData() interface{} {
	return &MainGeneratorTemplateData{
		Registry:          g.Config.Provider.Registry,
		ProviderNamespace: g.Config.Provider.ProviderNamespace(),
		ProviderName:      g.Config.Provider.ProviderName(),
		ModuleRepository:  g.Config.Provider.ModuleRepository,
	}
}

func NewMainGenerator(doc *openapi3.T, config *config.Config) *MainGenerator {
	return &MainGenerator{
		Doc:    doc,
		Config: config,
	}
}
