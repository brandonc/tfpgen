package generator

import "github.com/brandonc/tfpgen/internal/config"

type ProviderGenerator struct {
}

var providerTokenScheme = `
// Code generated by tfpgen; DO NOT EDIT.
package {{ .PackageName }}

type {{ .ProviderTypeStuct }} struct{}

type Provider struct {
	HttpClient client
	Configured bool
  Version string
}

type providerData struct {
	Endpoint types.String tfsdk:"endpoint",
}

func (p *Provider) GetSchema(ctx context.Context) (tfsdk.Schema, diag.Diagnostics) {
	return tfsdk.Schema{
		Attributes: map[string]tfsdk.Attribute{
			"endpoint": {
				MarkdownDescription: "The HTTP API endpoint for the provider",
				Optional:            true,
				Type:                types.StringType,
			},
			"api_token": {
				MarkdownDescription: "The HTTP API token, sent as Authorization: Bearer header",
				Optional:            true,
				Type:                types.StringType,
			},
		},
	}, nil
}

func (p *Provider) Configure(ctx context.Context, req tfsdk.ConfigureProviderRequest, resp *tfsdk.ConfigureProviderResponse) {
	var data providerData
	diags := req.Config.Get(ctx, &data)
	resp.Diagnostics.Append(diags...)

	if resp.Diagnostics.HasError() {
		return
	}

	endpoint := data.Endpoint.(string)
	apiToken := data.ApiT
	if data.Endpoint.Null {
		endpoint = {{ .DefaultEndpoint }}
	}

	// Configuration values are now available.
	// if data.Example.Null { /* ... */ }

	// If the upstream provider SDK or HTTP client requires configuration, such
	// as authentication or logging, this is a great opportunity to do so.

	p.Configured = true
}

{{ define "Attrs" }}
	// TfName        "{{.TfName}}"
	// Description   "{{.Description}}"
	// FrameworkType "{{.FrameworkType}}"
	// DataName      "{{.DataName}}"
	// DataType      "{{.DataType}}"
	{{ if .Attributes }}
	// Nested Attributes:
	{{- range $attribute := .Attributes }}{{ template "Attrs" $attribute }}{{- end}}
	{{ end }}
{{ end }}

// Attributes will be generated for this resource:
{{- range $attribute := .Attributes }}{{ template "Attrs" $attribute }}{{- end}}

// The factory function for this resource type will be "{{ .FactoryFunctionName }}"
`

func NewProviderGenerator(tf *config.Config) (*ProviderGenerator, error) {
	return &ProviderGenerator{}, nil
}
